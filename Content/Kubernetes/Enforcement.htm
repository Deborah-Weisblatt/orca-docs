<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
    </head>
    <body>
        <h1><MadCap:variable name="local.Kubernetes" /> Policy Enforcement</h1>
        <p><MadCap:variable name="local-orca.Product_S" /> enforces your security policy in the cluster using Kubernetes Network Policies and DNS control and additionally lets you apply the policy to firewalls. </p>
        <p class="h3">Kubernetes Network Policies</p>
        <p>Information security requires tight network segmentation in order to minimize the attack surface, prevent lateral movement of malicious code and enable compliance with policies.</p>
        <p>Kubernetes network policies provide a good means for network segmentation, but they are difficult to operate, especially in the highly dynamic environment of micro-services and DevOps. <MadCap:variable name="local-orca.Product_S"></MadCap:variable> allows you to automate the creation of Kubernetes network policies based on the application connectivity.</p>
        <p>Your network policy is <a href="AllowedConnections.htm#Export">exported</a> from <MadCap:variable name="local-orca.Product_S" /> as a YAML file and then imported to Kubernetes using kubectl to create the Kubernetes network policies. </p>
        <ul>
            <li>
                <p>For every <MadCap:variable name="local.Kubernetes" /> service that appears in "Allowed Connections", as source or destination, will have a corresponding <MadCap:variable name="local.Kubernetes" /> policy. </p>
            </li>
            <li>
                <p>Each service policy consists of all ingress and egress connections for the service.</p>
            </li>
            <li>
                <p>A cleanup policy will be added for every namespace.</p>
            </li>
            <li>
                <p>For discovered connections within the cluster, the Kubernetes network policies will be label-based.</p>
            </li>
            <li>
                <p>For discovered connections coming from outside the cluster (ingress via a load balancer), the Kubernetes network policies will allow traffic from any source IP.</p>
            </li>
            <li>
                <p>Where the service has egress to external end-points, the egress policy will contain the IPs that were discovered by <MadCap:variable name="local-orca.Product_S" /> as "ipBlock/cidr" entities with a comment describing the origin:</p><pre xml:space="preserve">
egress:
 - to:
  - ipBlock:
     cidr: 192.210.214.132/32 # api.timezonedb.com	
</pre>
            </li>
            <li>
                <p>For manually added allowed connections from a namespace to an external domain, the Kubernetes network policies will allow traffic to any destination IP.</p>
            </li>
        </ul>
        <ul>
            <li>
                <p>External services with many IPs (like cloudimageupdate-pa.googleapis.com) may only be partially covered because <MadCap:variable name="local-orca.Product_S" /> could only monitor IP's accessed from the cluster and there may be other IPs not yet seen. In this case, you can allow for any IP by creating a manual rule allowing access from the relevant namespace to the domain name; the policy will then be generated with egress to 0.0.0.0/0: Example:</p>
                <p>
                    <img src="../Kubernetes-Images/Screen_connection_egress_to_domain.png">
                    </img>
                </p>
            </li>
        </ul>
        <ul>
            <li>
                <p>Services that require ingress access (i.e. accept connections from an external source) have ingress with 0.0.0.0/0. Example:</p><pre xml:space="preserve">
ingress:
  - from:
    - ipBlock:
       cidr: 0.0.0.0/0 # ingress
</pre>
            </li>
            <li>
                <p>For each namespace, a corresponding "cleanup policy" will be added, which denies all inbound and outbound traffic except for access that was allowed to a namespace through a manually added rule.</p>
            </li>
            <li>
                <p>If not deleted by the user, the output will include the rule for all namespaces to access the Kubernetes DNS service:</p>
                <p>
                    <img src="../Kubernetes-Images/Screen_connection_allnamespacess_to_kubedns.png" />
                </p>
            </li>
        </ul>
        <p>Sample format:</p>
        <p>
            <img src="../Kubernetes-Images/yaml_network_policies.png" class="ThumbnailPopup">
            </img>
        </p>
        <p>See full <a href="KubernetesNetworkPolicyExample.txt">Example</a>. </p>
        <p class="h3">DNS</p>
        <p>Enforced when <span class="StatusOrValue">Policy Mode</span> is set to <span class="StatusOrValue">Enforce</span>.</p>
        <p>At installation time, the  DNS&#160;Plugin is installed in the Kubernetes DNS&#160;pod, which then acts as a proxy, processing all DNS queries before passing them to the Kubernetes DNS. When <MadCap:variable name="local-orca.Product_S" /> is set to <span class="StatusOrValue">Enforce</span>, any DNS query that is not defined in <MadCap:variable name="local-orca.Product_S" /> as an allowed connection returns an NX domain (non-existent domain). This enforcement method is not active when <MadCap:variable name="local-orca.Product_S" /> is set to <span class="StatusOrValue">Learn</span>.</p>
        <p>Enforcement by DNS&#160;works for all supported Kubernetes implementations except <MadCap:variable name="local-orca.Openshift" />, because it does not have a Kubernetes DNS.</p>
        <MadCap:snippetBlock src="../Resources/Snippets/Warning Enforce.flsnp" />
        <p class="h3">Apply on Firewalls</p>
        <p>You can implement the <MadCap:variable name="local-orca.Product_S" /> security policy on enterprise firewalls through <MadCap:variable name="local-orca.SecureChange" /> (requires <a href="SecureChangeIntegration.htm"><MadCap:variable name="local-orca.SecureChange" /> integration</a>). You can also implement the policy on Microsoft Azure Firewall directly from <MadCap:variable name="local-orca.Product_S" />. See <a href="AllowedConnections.htm#ApplyOnFW">Apply on Firewalls</a>.</p>
        <p class="h3">Additional Policy Enforcement Layers</p>
        <p><MadCap:variable name="local-orca.Product_S" /> can be integrated with additional policy enforcement layers such as Istio, cloud firewalls and more.  Contact <MadCap:variable name="local-orca.Product_S" /> support for specific requests. </p>
    </body>
</html>