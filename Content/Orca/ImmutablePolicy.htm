<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
    </head>
    <body>
        <h1>Immutable Policy</h1>
        <p><a href="#overview">Overview</a>
        </p>
        <p><a href="#Advantages">Advantages</a>
        </p>
        <p><a href="#Related Concepts">Related Concepts</a>
        </p>
        <p><a href="#CI/CD Implementation">Implementation</a>
        </p>
        <h2><a name="overview"></a>Overview</h2>
        <p><MadCap:variable name="local.Product_S" /> provides you with a way to implement your security policy automatically using a mechanism called immutable security policy. Immutable means fixed and unchangeable; that doesn't mean the fast-changing threat landscape isn't going to be met by equally rapid changes to your security rules, it just means that instead of modifying your existing security policy, you replace it with a new one. </p>
        <p>You introduce a new improved policy then dispose of the old one, keeping a copy in history for future reference.</p>
        <h2><a name="Advantages"></a>Advantages of an Immutable Security Policy</h2>
        <p>Allows you to better control your security policy by reducing configuration errors, speeding up deployment of that policy, viewing previous configurations and allowing rollback to them. All this is facilitated by the following characteristics:</p>
        <ol>
            <li>Can be created automatically based on  traffic discovered in the cluster.</li>
            <li>Can be recreated automatically at any time based on results of your predefined test cases that serve both your QA and also as the blueprint for the next immutable policy to be deployed.</li>
            <li>Security policy can be integrated into the CI/CD pipeline, making secops part of devops. </li>
            <li>Provides version control for security policy. Copies of decomissioned policies can be kept for comparison and rollback.</li>
            <li>By building a new policy each time from scratch, based only on desired traffic, old and forgotten rules that might constitute a risk today are eliminated.</li>
        </ol>
        <h2><a name="Related Concepts"></a>Related Concepts</h2>
        <p>This basic concept of immutability, replacement and disposal is central to automating a security policy but there are other related processes that should be understood.</p>
        <ol>
            <li>
                <p>Infrastructure as code (IaC)</p>
                <p>Despite its name, the infrastructure itself doesn't really reside in code, but rather what is needed to build the infrastructure as part of an automated process. The code may be in the form of scripts, definitions, markup language, data serialization language and other means in a repository where it can used in an automated build process. Code that defines your security policy can be kept in your application source code repository and deployed along with the application.</p>
            </li>
            <li>
                <p>Immutable infrastructure</p>
                <ul>
                    <li>Entire servers are replaced rather than modified</li>
                    <li>git - entire libraries of source files are replaced rather than modified</li>
                </ul>
            </li>
            <li>
                <p>Discovery</p>
                <p> Orca discovers all traffic in the cluster, therefore in a controlled environment you can run your application so it generates traffic that would be desired  in the production environment. This can then become the basis of the new policy rules. By re-running following changes to the application, you will ensure your policy is always optimized for security and connectivity</p>
            </li>
        </ol>
        <h2><a name="CI/CD Implementation"></a>Implementation</h2>
        <p>See <a href="WorkingWithImmutable.htm">Working With Immutable Policies</a></p>
    </body>
</html>